import javax.swing.*;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class titleScreen extends JFrame implements ActionListener{

    private final JLabel title = new JLabel(ImageFolderManager.getImageIcon("title.png"));
    //private final Image fallingChip = ImageFolderManager.getImageIcon("bgchip.png").getImage();

    //declare variables
    private int frameWidth = (int)ImageFolderManager.getImageDimensions("title.png").getWidth();
    private int frameHeight = 200+(int)ImageFolderManager.getImageDimensions("title.png").getHeight();
    private JButton goToGameLog;
    private JButton rules;
    private JButton playGame;
    //private static int y = 0;

    public titleScreen(){
        System.out.println(title.getIcon().getIconWidth());
        System.out.println(title.getIcon().getIconHeight());

        new JFrame("Setup Screen");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new FlowLayout());
        setSize(frameWidth,frameHeight);
        
        //setMovingPanel();
        
        //initialize the three buttons and add action listeners to all of them
        goToGameLog = new JButton("Game Log");
        goToGameLog.addActionListener(this);

        rules = new JButton("Rules");
        rules.addActionListener(this);

        playGame = new JButton("Play!");
        playGame.addActionListener(this);

        //add components to screen and set Frame to visisble
        addComponents(title, goToGameLog,rules,playGame);
        setLocationRelativeTo(null);
        setVisible(true);
    }

    public void addComponents(Component ... components){
        //quick method to add components to screen
        for(Component component:components){
            getContentPane().add(component);
        }
    }

    public void setMovingPanel(){
        JPanel backGround = new JPanel();
        backGround.setBackground(ColorManager.LIGHT_YELLOW);
        backGround.setSize(frameWidth,frameHeight);
        getContentPane().add(backGround);
    }

    //declare the frame for the rule screen that displays the rules and an image on how to play the game
    private void ruleScreen(){
        JFrame ruleScreen = new JFrame();
        ruleScreen.getContentPane().setLayout(
            new BoxLayout(ruleScreen.getContentPane(),
            BoxLayout.Y_AXIS));

        String instructions = """
        Welcome to Nim!        
        In this game, you play with a pile of chips, where each pile can have a certain number of chips
        You (the user) can define how many piles you want and the maximum number of chips in each pile,
        so long as the max does not exceed the absolute max defined in the game setup screen.
        The number of chips in each pile will be randomly generated by the computer.

        Your Goal: TAKE THE LAST CHIP
        Rules: 
        1) You can only take chips from ONE pile
        2) You can take any number of chips from that pile, even if it means taking all the chips
        3) You and the computer take turns taking chips from the pile until a winner is decided

        After the game finishes, you can find the game logs in the game log screen on the title screen.
        There, you will see the details of each game such as the initial chips, piles, date played and duration of game

        ENJOY!
        Example Valid Move:
                """;
        JLabel instructionLabel = new JLabel("<html>" +instructions.replaceAll("\n", "<br>") + "</html>");
        JLabel exampleImage = new JLabel(ImageFolderManager.getImageIcon("example.png"));
        ruleScreen.add(instructionLabel);
        ruleScreen.add(exampleImage);
        ruleScreen.pack();
        ruleScreen.setVisible(true);
    }

    //method to handle all the actions performed by the buttons
    public void actionPerformed(ActionEvent e){
        JButton source = (JButton) e.getSource();
        if (source == playGame){
            new gameSetupScreen();
            dispose();
        }else if(source == goToGameLog){
            new gameLogScreen();
            dispose();
        }else if(source == rules){
            ruleScreen();
        }
        
    }

    
}
